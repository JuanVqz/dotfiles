# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
extends rails

snippet saos "save_and_open_screenshot" b
save_and_open_screenshot
endsnippet

snippet saop "save_and_open_page" b
save_and_open_page
endsnippet

snippet sapp "show_page, javascript required" b
show_page
endsnippet

snippet it "it rspec" b
it "${1}" do
	${0}
end
endsnippet

snippet desc "describe rspec" b
describe "${1}" do
	${0}
end # describe $1
endsnippet

snippet cont "cont rspec" b
context "${1}" do
	${0}
end # context $1
endsnippet

snippet allowai "allow_any_instance_of" b
allow_any_instance_of(${1}).to receive(${2}).and_return(${3})
endsnippet

snippet allow "allow" b
allow(${1}).to receive(${2}).and_return(${3})
endsnippet

snippet nondoc "nondoc" b
# :nondoc:
endsnippet
