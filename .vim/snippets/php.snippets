snippet class
	namespace ${1}\\`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`;

	class `vim_snippets#Filename()`
	{
		${0}
	}

snippet trait
	namespace ${1}\\`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`;

	trait `vim_snippets#Filename()`
	{
		${0}
	}

snippet foreach "foreach($array as $key => $value)"
	foreach ($${1:array} as ${2:\$key} => $${3:value}) {
		${0}
	}

snippet m "php method"
	${1:public} function ${2:foo}(${3})
	{
		${0}
	}

# Relationships
snippet hm "hasMany"
	public function ${1:roles}() {
		return $this->hasMany(${2:Role}::class);
	}${0}

snippet ho "hasOne"
	public function ${1:role}() {
		return $this->hasOne(${2:Role}::class);
	}${0}

snippet bt "belongsTo"
	public function ${1:user}() {
		return $this->belongsTo(${2:User}::class);
	}${0}

snippet btm "belongsToMany"
	public function ${1:users}() {
		return $this->belongsToMany(${2:User}::class);
	}${0}

# Tests
snippet skip "skip test"
	$this->markTestSkipped('skip ${0}');

snippet t "/** @test */"
	/** @test */
	public function it_${1}() {
		${0}
	}

snippet testclass "class test"
	<?php

	namespace Tests\${1:Unit};

	use Illuminate\Foundation\Testing\WithoutMiddleware;
	use Illuminate\Foundation\Testing\DatabaseMigrations;
	use Illuminate\Foundation\Testing\DatabaseTransactions;

	class `vim_snippets#Filename()` extends TestCase
	{
		${0}
	}

# asserts
snippet assertTrue "assertTrue"
	${3:$this}->assertTrue(${1:false});

snippet assertEquals "assertEquals"
	${3:$this}->assertEquals(${1:expected}, ${2:actual});

snippet assertNotEquals "assertNotEquals"
	${3:$this}->assertNotEquals(${1:expected}, ${2:actual});

snippet assertInstanceOf "assertInstanceOf"
	${3:$this}->assertInstanceOf(${1:expected}, ${2:actual});

# Laravel asserts
snippet signin "signIn"
	\$this->signIn();${0}

snippet assertSee "assertSee"
	${2:$this}->assertSee(${1:'text'});

snippet assertDatabaseMissing "assertDatabaseMissing"
	${5:$this}->assertDatabaseMissing('${1:users}', ${2:['name' => 'john']});

snippet assertDatabaseHas "assertDatabaseHas"
	${5:$this}->assertDatabaseHas('${1:users}', ${2:['name' => 'john']});

snippet withoutExceptionHandling() "withoutExceptionHandling"
	\$this->withoutExceptionHandling();

snippet get "get('/')"
	\$this->get(${1:'/'});${0}

snippet assertStatus "assertStatus"
	${2:$this}->assertStatus(${1:200})

snippet assertViewHas "assertViewHas"
	${2:$this}->assertViewHas(${1:'roles'})

snippet assertViewIs "assertViewIs"
	${2:$this}->assertViewHas(${1:'users.edit'})

snippet assertRedirect "assertViewIs"
	${2:$this}->assertRedirect(${1:route('users.edit')})

snippet from "from route"
	\$this->from(route(${1:'users.edit'}))

snippet put "put route"
	${3:\$this}->put(route(${1:'users.update'})${2:, []})

snippet get "get route"
	${3:\$this}->get(route(${1:'users.update'}))

# Laravel
snippet dd "dd"
	dd(${1:\$request->all()});${0}

snippet controller "class NameController {}"
	namespace ${1}\\`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`;

	use Illuminate\Http\Request;

	class `vim_snippets#Filename()` extends Controller
	{${0}}

snippet view "return view()"
	return view('${1:folder.file}', compact('${2:model}'));

snippet log "Laravel Log"
	\Log::info(${0});

snippet compact "compact parametro"
	compact(${0})

snippet route "route('users.index')"
	route('${1:users.index}')

snippet rr "Route RESOURCE"
	Route::resource('${1:/users}', '${0:UsersController}');

snippet rp "Route POST"
	Route::post('${1:/users}', '${0:UsersController@store}')->name('${2:users.store}');

snippet rg "Route GET"
	Route::get('${1:/users}', '${0:UsersController@index}')->name('${2:users.index}');

